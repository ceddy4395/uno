<Project>
	<!--
		Include all required PackageReference to be available before any target is executed
		in order for VS and C# Dev Kit to show nuget references in their respective solution explorers.
		The version is not required, and VS/Code waits for some design-time targets to be executed to evaluate it.
	-->
	<ItemGroup>
		<PackageReference Include="Uno.WinUI" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(IsPackable) != 'true'">
		<PackageReference Include="Uno.UI.Adapter.Microsoft.Extensions.Logging" ProjectSystem="true" />
		<PackageReference Include="Uno.Resizetizer" ProjectSystem="true" />
		<PackageReference Include="Microsoft.Extensions.Logging.Console" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Maps;'))">
		<PackageReference Include="Uno.WinUI.Maps" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Foldable;'))">
		<PackageReference Include="Uno.WinUI.Foldable" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';CSharpMarkup;'))">
		<PackageReference Include="Uno.WinUI.Markup" ProjectSystem="true" />
		<PackageReference Include="Uno.Extensions.Markup.Generators" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Toolkit;'))">
		<PackageReference Include="Uno.Toolkit.WinUI" ProjectSystem="true" />
		<PackageReference Include="Uno.Toolkit.WinUI.Cupertino" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';Cupertino;'))" />
		<PackageReference Include="Uno.Toolkit.WinUI.Material" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';Material;'))" />
		<PackageReference Include="Uno.Toolkit.WinUI.Material.Markup" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';Material;')) AND $(UnoFeatures.Contains(';CSharpMarkup;'))" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Material;'))">
		<PackageReference Include="Uno.Material.WinUI" ProjectSystem="true" />
		<PackageReference Include="Uno.Material.WinUI.Markup" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';CSharpMarkup;'))" />
		<PackageReference Include="Uno.Themes.WinUI.Markup" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';CSharpMarkup;'))" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Cupertino;'))">
		<PackageReference Include="Uno.Cupertino.WinUI" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Prism;'))">
		<PackageReference Include="Prism.Uno.WinUI" ProjectSystem="true" Condition="!$(_IsExecutable)" />
		<PackageReference Include="Prism.DryIoc.Uno.WinUI" ProjectSystem="true" Condition="$(_IsExecutable)" />
		<PackageReference Include="Prism.Uno.WinUI.Markup" ProjectSystem="true" Condition="$(UnoFeatures.Contains(';CSharpMarkup;'))" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Dsp;'))">
		<PackageReference Include="Uno.Dsp.Tasks" ProjectSystem="true" />
	</ItemGroup>

	<ItemGroup Condition="$(UnoFeatures.Contains(';Mvvm;'))">
		<PackageReference Include="CommunityToolkit.Mvvm" ProjectSystem="true" />
	</ItemGroup>

	<Import Project="$(MSBuildThisFileDirectory)Uno.Extensions.Implicit.Packages.ProjectSystem.targets" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.Android.targets"
		Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.Desktop.targets"
		Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'desktop'" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.iOS.targets"
		Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.MacCatalyst.targets"
		Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.MacOS.targets"
		Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'macos'" />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.Wasm.targets"
		Condition=" '$(IsBrowserWasm)' == 'true' " />
	<Import Project="$(MSBuildThisFileDirectory)Uno.Implicit.Packages.ProjectSystem.WinAppSdk.targets"
		Condition="$(TargetFramework.Contains('windows10'))" />
</Project>
